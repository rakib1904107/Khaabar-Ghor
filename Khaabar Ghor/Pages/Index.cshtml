@page
@model IndexModel
@{
    ViewData["Title"] = "Home";
}

<link rel="stylesheet" href="~/css/home.css" />

<!-- Hero Section -->
<section class="hero-section">
    <div class="hero-content">
        <h1>Welcome to Our Restaurant</h1>
        <p>Discover our delicious menu items</p>
        <a href="#menu-section" class="hero-button">View Menu</a>
    </div>
</section>

<!-- Menu Section -->
<section id="menu-section" class="menu-section">
    <header class="section-title">
        <h2>Our Menu</h2>
        <p>Explore our wide range of dishes</p>
    </header>

    <!-- Category Tabs -->
    <nav class="category-tabs">
        <button class="tab-btn active" data-category="all">All</button>
        @foreach (var category in Model.Categories)
        {
            <button class="tab-btn" data-category="@category">@category</button>
        }
    </nav>

    <!-- Menu Items -->
    @foreach (var category in Model.Categories)
    {
        <section class="category-section" data-category="@category">
            <h3 class="category-title">@category</h3>
            <div class="menu-grid">
                @foreach (var item in Model.MenuItems.Where(m => m.Category == category))
                {
                    <article class="menu-card" data-category="@item.Category">
                        <figure class="menu-image">
                            <img src="@item.ImageUrl" alt="@item.Name">
                        </figure>
                        <div class="menu-content">
                            <h3 class="menu-item-title">@item.Name</h3>
                            <footer class="menu-item-footer">
                                <span class="price">$@item.Price.ToString("0.00")</span>
                            </footer>
                            <div class="cart-controls">
                                <div class="quantity-controls">
                                    <button type="button" class="qty-btn decrease" data-id="@item.Id">-</button>
                                    <input type="number" id="qty-@item.Id" value="1" min="1" class="quantity-input" readonly>
                                    <button type="button" class="qty-btn increase" data-id="@item.Id">+</button>
                                </div>
                                <button type="button" class="add-to-cart-btn" data-id="@item.Id">
                                    <i class="fas fa-shopping-cart"></i> Add to Cart
                                </button>
                            </div>
                        </div>
                    </article>
                }
            </div>
        </section>
    }
</section>

<!-- Cart Notification -->
<div id="cart-notification" class="cart-notification">Item added to cart!</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            initializeCategoryFilter();
            initializeQuantityControls();
            initializeAddToCart();
        });

        // Category Filter
        function initializeCategoryFilter() {
            const categoryButtons = document.querySelectorAll(".tab-btn");
            const menuCards = document.querySelectorAll(".menu-card");

            categoryButtons.forEach(btn => {
                btn.addEventListener("click", function () {
                    // Update active button
                    categoryButtons.forEach(b => b.classList.remove("active"));
                    btn.classList.add("active");

                    // Filter menu items
                    const category = btn.dataset.category;
                    menuCards.forEach(card => {
                        if (category === 'all' || card.dataset.category === category) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });
        }

        // Quantity Controls
        function initializeQuantityControls() {
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('qty-btn')) {
                    const itemId = e.target.dataset.id;
                    const input = document.getElementById(`qty-${itemId}`);
                    const currentValue = parseInt(input.value);

                    if (e.target.classList.contains('increase')) {
                        input.value = currentValue + 1;
                    } else if (e.target.classList.contains('decrease') && currentValue > 1) {
                        input.value = currentValue - 1;
                    }
                }
            });
        }

        // Add to Cart
        function initializeAddToCart() {
            const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = this.getAttribute('data-id');
                    const quantity = parseInt(document.getElementById(`qty-${itemId}`).value);
                    addToCart(itemId, quantity);
                });
            });
        }

        function addToCart(itemId, quantity) {
            console.log('Adding to cart:', { itemId, quantity }); // Debug log

            fetch('/api/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    menuId: parseInt(itemId),
                    quantity: parseInt(quantity)
                })
            })
                .then(response => {
                    console.log('Response:', response); // Debug log
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Success:', data); // Debug log
                    if (data.success) {
                        showNotification('Item added to cart successfully!');
                        document.getElementById(`qty-${itemId}`).value = 1; // Reset quantity
                    } else {
                        showNotification('Error adding item to cart', true);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error adding item to cart', true);
                });
        }

        function showNotification(message, isError = false) {
            const notification = document.getElementById('cart-notification');
            notification.textContent = message;
            notification.style.backgroundColor = isError ? '#dc3545' : '#4CAF50';
            notification.classList.add('show');
            setTimeout(() => {
                notification.classList.remove('show');
            }, 2000);
        }

        function triggerCartUpdate() {
            document.dispatchEvent(new Event('cartUpdated'));
        }

    </script>
}
